# -*- coding: utf-8 -*-
"""ethipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rHdO0pUW84E4kmade7aFpm1TbSNWK5aR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential
from keras.optimizers import Adam
from tensorflow import keras
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

stock_symbol = "ETH-USD"
start_date = "2016-01-01"
end_date = "2023-09-01"

# Download historical stock data
df = yf.download(stock_symbol, start=start_date, end=end_date)
df.head()

df=df.reset_index()
df.head()

df=df.drop(['Date','Adj Close'],axis=1)
df.head()

plt.plot(df.Close)

ma100=df.Close.rolling(100).mean()
ma200=df.Close.rolling(200).mean()

plt.figure(figsize=(12,6))
plt.plot(df.Close)
plt.plot(ma100,'r')
plt.plot(ma200,'g')

df.shape

data_training=pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing=pd.DataFrame(df['Close'][int(len(df)*0.70):int(len(df))])
print(data_training.shape)
print(data_testing.shape)

scaler = MinMaxScaler(feature_range=(0,1))

data_training_array=scaler.fit_transform(data_training)

x_train=[]
y_train=[]
for i in range(100,data_training_array.shape[0]):
  x_train.append(data_training_array[i-100:i])
  y_train.append(data_training_array[i,0])
x_train,y_train=np.array(x_train),np.array(y_train)

x_train_indices = range(len(data_training))
x_test_indices = range(len(data_training), len(data_training) + len(data_testing))

# Plot data_training and data_testing in a line chart
plt.figure(figsize=(12, 6))
plt.plot(x_train_indices, data_training, label='Training Data')
plt.plot(x_test_indices, data_testing, label='Testing Data', color='orange')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.title('Training vs. Testing Data')
plt.show()

model = Sequential()
model.add(LSTM(units=50, activation='relu', return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=60, activation='relu', return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units=80, activation='relu', return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units=120, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train,y_train,epochs=50)

model.save('pre.h5')

"""Prediction for past 1 year"""

past_365_days=data_training.tail(365)

final_df=past_365_days.append(data_testing,ignore_index=True)

input_data=scaler.fit_transform(final_df)

x_test=[]
y_test=[]
for i in range(100,input_data.shape[0]):
  x_test.append(input_data[i-100:i])
  y_test.append(input_data[i,0])
x_test,y_test=np.array(x_test),np.array(y_test)

y_predicted = model.predict(x_test)

scaler.scale_

scale_factor=1/0.0002344
y_predicted=y_predicted*scale_factor
y_test=y_test*scale_factor

plt.figure(figsize=(12,6))
plt.plot(y_test,'b',label='Orginal Price of past 1 year')
plt.plot(y_predicted,'r',label='Predicted Price of past 1 year')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

"""Prediction of last 100 days"""

past_100_days=data_training.tail()
final_df=past_100_days.append(data_testing,ignore_index=True)
input_data=scaler.fit_transform(final_df)
x_test=[]
y_test=[]
for i in range(100,input_data.shape[0]):
  x_test.append(input_data[i-100:i])
  y_test.append(input_data[i,0])
x_test,y_test=np.array(x_test),np.array(y_test)
y_predicted = model.predict(x_test)
scaler.scale_
scale_factor=1/0.00027489
y_predicted=y_predicted*scale_factor
y_test=y_test*scale_factor
plt.figure(figsize=(12,6))
plt.plot(y_test,'b',label='Orginal Price of last 100 days')
plt.plot(y_predicted,'r',label='Predicted Price of last 100 days')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

mse = mean_squared_error(y_test, y_predicted)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_predicted)
r2 = r2_score(y_test, y_predicted)

# Create a DataFrame to store the metrics
metrics_df = pd.DataFrame({
    'Metrics': ['MSE', 'RMSE', 'MAE', 'R2'],
    'Values': [mse, rmse, mae, r2]
})
print(metrics_df)